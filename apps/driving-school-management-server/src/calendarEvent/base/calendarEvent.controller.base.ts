/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CalendarEventService } from "../calendarEvent.service";
import { CalendarEventCreateInput } from "./CalendarEventCreateInput";
import { CalendarEvent } from "./CalendarEvent";
import { CalendarEventFindManyArgs } from "./CalendarEventFindManyArgs";
import { CalendarEventWhereUniqueInput } from "./CalendarEventWhereUniqueInput";
import { CalendarEventUpdateInput } from "./CalendarEventUpdateInput";

export class CalendarEventControllerBase {
  constructor(protected readonly service: CalendarEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CalendarEvent })
  async createCalendarEvent(
    @common.Body() data: CalendarEventCreateInput
  ): Promise<CalendarEvent> {
    return await this.service.createCalendarEvent({
      data: {
        ...data,

        car: data.car
          ? {
              connect: data.car,
            }
          : undefined,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,

        teacher: data.teacher
          ? {
              connect: data.teacher,
            }
          : undefined,
      },
      select: {
        car: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        lessonType: true,

        student: {
          select: {
            id: true,
          },
        },

        teacher: {
          select: {
            id: true,
          },
        },

        time: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CalendarEvent] })
  @ApiNestedQuery(CalendarEventFindManyArgs)
  async calendarEvents(
    @common.Req() request: Request
  ): Promise<CalendarEvent[]> {
    const args = plainToClass(CalendarEventFindManyArgs, request.query);
    return this.service.calendarEvents({
      ...args,
      select: {
        car: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        lessonType: true,

        student: {
          select: {
            id: true,
          },
        },

        teacher: {
          select: {
            id: true,
          },
        },

        time: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CalendarEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async calendarEvent(
    @common.Param() params: CalendarEventWhereUniqueInput
  ): Promise<CalendarEvent | null> {
    const result = await this.service.calendarEvent({
      where: params,
      select: {
        car: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        lessonType: true,

        student: {
          select: {
            id: true,
          },
        },

        teacher: {
          select: {
            id: true,
          },
        },

        time: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CalendarEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCalendarEvent(
    @common.Param() params: CalendarEventWhereUniqueInput,
    @common.Body() data: CalendarEventUpdateInput
  ): Promise<CalendarEvent | null> {
    try {
      return await this.service.updateCalendarEvent({
        where: params,
        data: {
          ...data,

          car: data.car
            ? {
                connect: data.car,
              }
            : undefined,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,

          teacher: data.teacher
            ? {
                connect: data.teacher,
              }
            : undefined,
        },
        select: {
          car: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          id: true,
          lessonType: true,

          student: {
            select: {
              id: true,
            },
          },

          teacher: {
            select: {
              id: true,
            },
          },

          time: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CalendarEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCalendarEvent(
    @common.Param() params: CalendarEventWhereUniqueInput
  ): Promise<CalendarEvent | null> {
    try {
      return await this.service.deleteCalendarEvent({
        where: params,
        select: {
          car: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          id: true,
          lessonType: true,

          student: {
            select: {
              id: true,
            },
          },

          teacher: {
            select: {
              id: true,
            },
          },

          time: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
