/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Secretary as PrismaSecretary } from "@prisma/client";

export class SecretaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SecretaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.secretary.count(args);
  }

  async secretaries(
    args: Prisma.SecretaryFindManyArgs
  ): Promise<PrismaSecretary[]> {
    return this.prisma.secretary.findMany(args);
  }
  async secretary(
    args: Prisma.SecretaryFindUniqueArgs
  ): Promise<PrismaSecretary | null> {
    return this.prisma.secretary.findUnique(args);
  }
  async createSecretary(
    args: Prisma.SecretaryCreateArgs
  ): Promise<PrismaSecretary> {
    return this.prisma.secretary.create(args);
  }
  async updateSecretary(
    args: Prisma.SecretaryUpdateArgs
  ): Promise<PrismaSecretary> {
    return this.prisma.secretary.update(args);
  }
  async deleteSecretary(
    args: Prisma.SecretaryDeleteArgs
  ): Promise<PrismaSecretary> {
    return this.prisma.secretary.delete(args);
  }
}
