/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Secretary } from "./Secretary";
import { SecretaryCountArgs } from "./SecretaryCountArgs";
import { SecretaryFindManyArgs } from "./SecretaryFindManyArgs";
import { SecretaryFindUniqueArgs } from "./SecretaryFindUniqueArgs";
import { CreateSecretaryArgs } from "./CreateSecretaryArgs";
import { UpdateSecretaryArgs } from "./UpdateSecretaryArgs";
import { DeleteSecretaryArgs } from "./DeleteSecretaryArgs";
import { SecretaryService } from "../secretary.service";
@graphql.Resolver(() => Secretary)
export class SecretaryResolverBase {
  constructor(protected readonly service: SecretaryService) {}

  async _secretariesMeta(
    @graphql.Args() args: SecretaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Secretary])
  async secretaries(
    @graphql.Args() args: SecretaryFindManyArgs
  ): Promise<Secretary[]> {
    return this.service.secretaries(args);
  }

  @graphql.Query(() => Secretary, { nullable: true })
  async secretary(
    @graphql.Args() args: SecretaryFindUniqueArgs
  ): Promise<Secretary | null> {
    const result = await this.service.secretary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Secretary)
  async createSecretary(
    @graphql.Args() args: CreateSecretaryArgs
  ): Promise<Secretary> {
    return await this.service.createSecretary({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Secretary)
  async updateSecretary(
    @graphql.Args() args: UpdateSecretaryArgs
  ): Promise<Secretary | null> {
    try {
      return await this.service.updateSecretary({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Secretary)
  async deleteSecretary(
    @graphql.Args() args: DeleteSecretaryArgs
  ): Promise<Secretary | null> {
    try {
      return await this.service.deleteSecretary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
