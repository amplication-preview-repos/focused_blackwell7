/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SecretaryService } from "../secretary.service";
import { SecretaryCreateInput } from "./SecretaryCreateInput";
import { Secretary } from "./Secretary";
import { SecretaryFindManyArgs } from "./SecretaryFindManyArgs";
import { SecretaryWhereUniqueInput } from "./SecretaryWhereUniqueInput";
import { SecretaryUpdateInput } from "./SecretaryUpdateInput";

export class SecretaryControllerBase {
  constructor(protected readonly service: SecretaryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Secretary })
  async createSecretary(
    @common.Body() data: SecretaryCreateInput
  ): Promise<Secretary> {
    return await this.service.createSecretary({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Secretary] })
  @ApiNestedQuery(SecretaryFindManyArgs)
  async secretaries(@common.Req() request: Request): Promise<Secretary[]> {
    const args = plainToClass(SecretaryFindManyArgs, request.query);
    return this.service.secretaries({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Secretary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async secretary(
    @common.Param() params: SecretaryWhereUniqueInput
  ): Promise<Secretary | null> {
    const result = await this.service.secretary({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Secretary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSecretary(
    @common.Param() params: SecretaryWhereUniqueInput,
    @common.Body() data: SecretaryUpdateInput
  ): Promise<Secretary | null> {
    try {
      return await this.service.updateSecretary({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Secretary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSecretary(
    @common.Param() params: SecretaryWhereUniqueInput
  ): Promise<Secretary | null> {
    try {
      return await this.service.deleteSecretary({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
